# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: OpenAI.NET Build

on:
  push:
    branches: [ "main","develop" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: src/OpenAI.Net.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: src/OpenAI.Net.Tests/OpenAI.Net.Tests.csproj                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: src/OpenAI.Net    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: src/OpenAI.Net/OpenAI.Net.csproj               # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
     

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Install coverlet
    - name: Install Coverlet
      run: dotnet tool install coverlet.console --tool-path src/OpenAI.Net.Tests
      working-directory: src/OpenAI.Net.Tests

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test src/OpenAI.Net.Tests/OpenAI.Net.Tests.csproj --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
      
    # Execute Acceptance tests in the solution
    - name: Execute acceptance tests
      run: dotnet test src/OpenAI.Net.Acceptance.Tests/OpenAI.Net.Acceptance.Tests.csproj --configuration Release

    # Execute Integration tests in the solution
    - name: Execute Integration Tests 
      run: dotnet test src/OpenAI.Net.Integration.Tests/OpenAI.Net.Integration.Tests.csproj --configuration Release
      env: 
        Apikey: ${{ secrets.APIKEY }}
        ApiUrl: ${{ secrets.APIURL }}

    # Install Stryker
    - name: Install Stryker
      run: dotnet tool install dotnet-stryker --tool-path src/OpenAI.Net.Tests
      working-directory: src/OpenAI.Net.Tests
      
    # Stryker
    - name: Run Stryker
      run: src/OpenAI.Net.Tests/dotnet-stryker --reporter "dashboard" --version "main" --dashboard-api-key ${{ secrets.STRYKER_DASHBOARD_API_KEY }}
      working-directory: src/OpenAI.Net.Tests



    # Build
    - name: Build
      run: dotnet build src/OpenAI.Net.sln --configuration Release 

    - name: Publish NuGet
      if: github.ref == 'refs/heads/main'
      run: dotnet nuget push src/OpenAI.Net/bin/Release/**\*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_APIKEY }} --source https://api.nuget.org/v3/index.json
      
    - name: Add GitHub Packages Source
      if: github.ref == 'refs/heads/main'
      run: dotnet nuget add source --username jodendaal --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/jodendaal/index.json"
      
    - name: Publish NuGet to GitHub Packages
      if: github.ref == 'refs/heads/main'
      run: dotnet nuget push src/OpenAI.Net/bin/Release/**\*.nupkg --skip-duplicate --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"

    - name: Create Test Coverage Badge
      if: github.ref == 'refs/heads/main'
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: src\OpenAI.Net.Tests\coverage.opencover.xml
        gist-filename: OpenAI.Net-code-coverage.json
        gist-id: 1823aaf39c6273b92442849479616daf
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}   
            
    - name: Print code coverage
      if: github.ref == 'refs/heads/main'
      run: echo "Code coverage percentage ${{steps.create_coverage_badge.outputs.percentage}}%"

    - name: Print badge data
      if: github.ref == 'refs/heads/main'
      run: echo "Badge data ${{steps.test_step.outputs.badge}}"
  
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
   # - name: Upload build artifacts
    #  uses: actions/upload-artifact@v3
   #   with:
     #   name: MSIX Package
     #   path: ${{ env.Wap_Project_Directory }}\AppPackages
